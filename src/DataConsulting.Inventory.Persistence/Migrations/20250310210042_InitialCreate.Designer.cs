// <auto-generated />
using System;
using DataConsulting.Inventory.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataConsulting.Inventory.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250310210042_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataConsulting.Inventory.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("BaseUnit")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("base_unit");

                    b.Property<string>("Caliber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("caliber");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_products_user_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("DataConsulting.Inventory.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Apellido")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("apellido");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email")
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DataConsulting.Inventory.Domain.Products.Product", b =>
                {
                    b.HasOne("DataConsulting.Inventory.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_user_user_id");

                    b.OwnsOne("DataConsulting.Inventory.Domain.Products.ValueObjects.AdjustmentFactors", "AdjustmentFactors", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("ConditioningFactor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("adjustment_factors_conditioning_factor");

                            b1.Property<decimal>("LossFactor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("adjustment_factors_loss_factor");

                            b1.Property<decimal>("UsageFactor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("adjustment_factors_usage_factor");

                            b1.Property<decimal>("WeightFactor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("adjustment_factors_weight_factor");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("DataConsulting.Inventory.Domain.Products.ValueObjects.Expiration", "Expiration", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<int>("DurationDays")
                                .HasColumnType("int")
                                .HasColumnName("expiration_duration_days");

                            b1.Property<bool>("HasExpiration")
                                .HasColumnType("bit")
                                .HasColumnName("expiration_has_expiration");

                            b1.Property<int>("PreExpirationDays")
                                .HasColumnType("int")
                                .HasColumnName("expiration_pre_expiration_days");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("DataConsulting.Inventory.Domain.Products.ValueObjects.GeneralProperties", "GeneralProperties", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<bool>("HasDrawback")
                                .HasColumnType("bit")
                                .HasColumnName("general_properties_has_drawback");

                            b1.Property<bool>("IsCompositeProduct")
                                .HasColumnType("bit")
                                .HasColumnName("general_properties_is_composite_product");

                            b1.Property<bool>("IsImported")
                                .HasColumnType("bit")
                                .HasColumnName("general_properties_is_imported");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("DataConsulting.Inventory.Domain.Products.ValueObjects.LogisticsProperties", "LogisticsProperties", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("CatalogType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("logistics_properties_catalog_type");

                            b1.Property<string>("TrackingType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("logistics_properties_tracking_type");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("DataConsulting.Inventory.Domain.Products.ValueObjects.PhysicalProperties", "PhysicalProperties", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Volume")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("physical_properties_volume");

                            b1.Property<decimal>("Weight")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("physical_properties_weight");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("DataConsulting.Inventory.Domain.Products.ValueObjects.Taxation", "Taxation", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<bool>("ForeignVAT")
                                .HasColumnType("bit")
                                .HasColumnName("taxation_foreign_vat");

                            b1.Property<bool>("ICBPERApplicable")
                                .HasColumnType("bit")
                                .HasColumnName("taxation_icbper_applicable");

                            b1.Property<bool>("ISCApplicable")
                                .HasColumnType("bit")
                                .HasColumnName("taxation_isc_applicable");

                            b1.Property<decimal>("ISCPercentage")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("taxation_isc_percentage");

                            b1.Property<decimal>("Perception")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("taxation_perception");

                            b1.Property<bool>("VATApplicable")
                                .HasColumnType("bit")
                                .HasColumnName("taxation_vat_applicable");

                            b1.Property<decimal>("VATPercentage")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("taxation_vat_percentage");

                            b1.Property<decimal>("Withholding")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("taxation_withholding");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("AdjustmentFactors");

                    b.Navigation("Expiration");

                    b.Navigation("GeneralProperties");

                    b.Navigation("LogisticsProperties");

                    b.Navigation("PhysicalProperties");

                    b.Navigation("Taxation");
                });
#pragma warning restore 612, 618
        }
    }
}
